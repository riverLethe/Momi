// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 用户表
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  avatar    String?
  
  // 认证相关
  password  String?  // 邮箱登录密码，OAuth用户可能为空
  googleId  String?  @unique // Google OAuth ID
  appleId   String?  @unique // Apple Sign In ID
  wechatOpenId String? @unique // WeChat OpenID
  wechatUnionId String? // WeChat UnionID
  
  // 用户偏好设置
  currency          String   @default("USD")
  language          String   @default("en")
  theme             String   @default("system") // light, dark, system
  timezone          String   @default("UTC")
  notificationsEnabled Boolean @default(true)
  
  // 预算设置
  defaultBudgetAmount   Float?
  defaultBudgetPeriod   String?  // weekly, monthly, yearly
  budgetIncludedCategories String @default("[]") // JSON array as string
  budgetExcludedCategories String @default("[]") // JSON array as string
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lastLoginAt DateTime?
  lastSyncAt DateTime?
  
  // 关联关系
  bills     Bill[]
  budgets   Budget[]
  syncLogs  SyncLog[]
  sessions  UserSession[]
  
  @@map("users")
}

// 用户会话表（用于管理登录状态）
model UserSession {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  deviceInfo String? // 设备信息
  ipAddress String?
  userAgent String?
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("user_sessions")
}

// 账单表
model Bill {
  id            String   @id @default(cuid())
  userId        String
  
  // 账单基本信息
  amount        Float
  category      String   // 分类ID
  categoryName  String?  // 分类显示名称
  merchant      String?  // 商家名称
  note          String?  // 备注
  paymentMethod String   // 支付方式
  
  // 时间信息
  billDate      DateTime // 账单日期
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  // 同步相关
  lastModified  DateTime @default(now())
  syncVersion   Int      @default(1)
  isDeleted     Boolean  @default(false)
  
  // 扩展信息
  receiptUrl    String?  // 收据图片URL
  location      String?  // 地理位置
  tags          String @default("[]") // JSON array as string
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, billDate])
  @@index([userId, category])
  @@index([userId, lastModified])
  @@map("bills")
}

// 预算表
model Budget {
  id        String   @id @default(cuid())
  userId    String
  
  // 预算基本信息
  name      String   // 预算名称
  amount    Float
  period    String   // weekly, monthly, yearly
  category  String?  // 特定分类预算，null表示总预算
  
  // 预算周期
  startDate DateTime
  endDate   DateTime
  
  // 预算设置
  isActive  Boolean  @default(true)
  alertThreshold Float? // 警告阈值（百分比）
  
  // 时间戳
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // 同步相关
  lastModified DateTime @default(now())
  syncVersion  Int      @default(1)
  isDeleted    Boolean  @default(false)
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, period])
  @@index([userId, isActive])
  @@index([startDate, endDate])
  @@map("budgets")
}

// 分类定义表
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  displayName String   // 显示名称
  icon        String?  // 图标名称
  color       String?  // 颜色代码
  parentId    String?  // 父分类ID，支持子分类
  isSystem    Boolean  @default(true) // 是否为系统预定义分类
  isActive    Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  
  @@map("categories")
}

// 同步日志表
model SyncLog {
  id        String   @id @default(cuid())
  userId    String
  
  // 同步信息
  syncType  String   // full, incremental, conflict_resolution
  status    String   // success, error, partial
  message   String?  // 错误信息或同步详情
  
  // 同步统计
  billsUploaded    Int @default(0)
  billsDownloaded  Int @default(0)
  budgetsUploaded  Int @default(0)
  budgetsDownloaded Int @default(0)
  conflictsResolved Int @default(0)
  
  // 设备信息
  deviceId     String?
  deviceType   String? // ios, android, web
  appVersion   String?
  
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId, createdAt])
  @@map("sync_logs")
}

// 数据冲突解决表
model DataConflict {
  id        String   @id @default(cuid())
  userId    String
  
  // 冲突信息
  entityType    String   // bill, budget
  entityId      String   // 实体ID
  conflictType  String   // update_conflict, delete_conflict
  
  // 冲突数据
  localData     Json     // 本地数据
  serverData    Json     // 服务器数据
  
  // 解决信息
  isResolved    Boolean  @default(false)
  resolvedData  Json?    // 解决后的数据
  resolvedBy    String?  // auto, user
  resolvedAt    DateTime?
  
  createdAt DateTime @default(now())
  
  @@index([userId, isResolved])
  @@map("data_conflicts")
}

// 系统配置表
model SystemConfig {
  id    String @id @default(cuid())
  key   String @unique
  value Json
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("system_configs")
}
